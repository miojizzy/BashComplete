# .bash_complete

#complete -F _complete_function ssh
complete -F _complete_function_level test_level.sh
complete -F _complete_function_tree test_tree.sh
complete -F _complete_function_full test_full.sh

#***********************************************************************
# function config
#CF_MODE="tree" # tree/level
CF_PREFIX=""
CF_SUFFIX=".cf"

#***********************************************************************
# complete config
#_complete_function()
#{
#    _complete_function_tree
#}

_complete_function_full()
{
    local cur prev
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    opts=""
    while read -r line; do # 补全文件遍历每一行
        arr=($(compgen -W "${line}")) # 分割成数组 => 补全数组
        for((i=1; i<=${COMP_CWORD} ; i++)); do # 遍历已补全数组 idx从1开始
            current=${COMP_WORDS[$i]} #取对应 已补全数组 idx0是程序自己的名字
            complete=${arr[$i-1]} #取对应 补全数组 idx从0开始
#            echo "->" $i "|" $current "|" $complete 
            if [[ $i -eq ${COMP_CWORD} ]]; then
#                echo "->1" 
                opts+=" ${arr[$i-1]}"
            elif [[ $i -ge ${#arr[@]} ]] || [[ $current != $complete ]]; then # complete数组娶不到了或者不相同了
#                echo "->2" 
                break
            fi
        done
#done < ${COMP_WORDS[0]}.cf
    done < ${CF_PREFIX}${COMP_WORDS[0]}${CF_SUFFIX}

    if [[ ${cur} == * ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    fi
}


_complete_function_tree()
{
    local cur prev
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    opts=""
    while read -r line; do
        pt=$(echo $line |awk -F":" '{print $1}')
        lv=$(echo $line |awk -F":" '{print $2}')
        if [[ -z ${prev%${pt}} ]] || [[ ${COMP_CWORD} -eq $lv ]]; then # use pattern ${pt} check ${prev} and check level
            opts=$(echo $line |awk -F":" '{print $3}')
        fi
#done < ${COMP_WORDS[0]}.cf
    done < ${CF_PREFIX}${COMP_WORDS[0]}${CF_SUFFIX}

    if [[ ${cur} == * ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    fi
}


_complete_function_level()
{
    local cur prev
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    opts=""
    while read -r line; do
        l1=$(echo $line |awk -F":" '{print $1}')
        l2=$(echo $line |awk -F":" '{print $2}')
        if [ $COMP_CWORD == $l1 ]; then # use pattern ${l1} check ${prev}
            opts="$l2"
            break
        fi
#done < ${COMP_WORDS[0]}.cf
    done < ${CF_PREFIX}${COMP_WORDS[0]}${CF_SUFFIX}

    if [[ ${cur} == * ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    fi
}
