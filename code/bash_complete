# .bash_complete


# add alias 
complete -F _complete_function ssh
complete -F _complete_function_level test_level.sh
complete -F _complete_function_tree test_tree.sh


# function config
CF_MODE="tree" # tree/level
CF_PREFIX=""
CF_SUFFIX=".cf"

# complete config

_complete_function()
{
    _complete_function_tree
}

_complete_function_tree()
{
    local cur prev
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    opts=""
    while read -r line; do
        lv=$(echo $line |awk -F":" '{print $1}')
        l1=$(echo $line |awk -F":" '{print $2}')
        l2=$(echo $line |awk -F":" '{print $3}')
        if [[ -z ${prev%${l1}} ]] || [[ ${COMP_CWORD} -eq $lv ]]; then # use pattern ${l1} check ${prev}
            opts="$l2"
        fi
#done < ${CF_PREFIX}${COMP_WORDS[0]}${CF_SUFFIX}
    done < ${COMP_WORDS[0]}.cf

    if [[ ${cur} == * ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    fi
}


_complete_function_level()
{
    local cur prev
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    opts=""
    while read -r line; do
        l1=$(echo $line |awk -F":" '{print $1}')
        l2=$(echo $line |awk -F":" '{print $2}')
        if [ $COMP_CWORD == $l1 ]; then # use pattern ${l1} check ${prev}
            opts="$l2"
            break
        fi
    done < ${COMP_WORDS[0]}.cf

    if [[ ${cur} == * ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    fi
}
